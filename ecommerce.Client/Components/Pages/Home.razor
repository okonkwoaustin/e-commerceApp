@page "/"

@using System.Net.Http.Json
@using System.Threading
@using e_commerceApp.Application.Services.Interface
@using e_commerceApp.Shared.Models
@using ecommerce.Client.ViewModels
@inject HttpClient httpClient
@inject IDialogService DialogService


@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<h2 class="text-center">
    Employee Management System
</h2>



<MudDataGrid @ref="dataGrid" T="Employee" ServerData="ServerReload" Filterable="false">
    <ToolBarContent>
        <MudButton Class="me-2"
                   @onclick="CreateNewUser"
                   StartIcon="@Icons.Material.Filled.PersonAddAlt1"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
                   Add New Employee
        </MudButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Employee Id" />
        <PropertyColumn Property="x => x.FullName" Title="Full Name" />
        <PropertyColumn Property="x => x.Department" />
        <PropertyColumn Property="x => x.DateOfBirth" Format="dd MMM yyyy" Title="Date of Birth" />
        <PropertyColumn Property="x => x.DateCreated" Format="dd MMM yyyy" Title="Date Created" />
        <PropertyColumn Property="x => x.Age" Title="Age " />
        <PropertyColumn Property="x => x.PhoneNumber" Title="Phone Number" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Employee" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<Employee> dataGrid;
    string searchString = null;

    private async Task<GridData<Employee>> ServerReload(GridState<Employee> state)
    {
        // IEnumerable<EmployeeMV> response = await httpClient.GetFromJsonAsync<List<EmployeeMV>>("api/Employee/getAllEmployee");

        var response = await httpClient.GetFromJsonAsync<List<Employee>>("api/Employee/getAllEmployee");
        await Task.Delay(300);
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            response = response.Where(employee =>
                employee.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                employee.Department.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                employee.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        var totalItems = response.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Employee.Id):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Id
                    ).ToList();
                    break;
                case nameof(Employee.FullName):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.FullName
                    ).ToList();
                    break;
                case nameof(Employee.Department):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Department
                    ).ToList();
                    break;
                case nameof(Employee.DateOfBirth):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.DateOfBirth
                    ).ToList();
                    break;
                case nameof(Employee.Age):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Age
                    ).ToList();
                    break;
                case nameof(Employee.PhoneNumber):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.PhoneNumber
                    ).ToList();
                    break;
                case nameof(Employee.DateCreated):
                    response = response.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.DateCreated
                    ).ToList();
                    break;
            }
        }

        var pagedData = response.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<Employee>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }
    private async Task CreateNewUser()
    {
        var options = new DialogOptions {MaxWidth = MaxWidth.Large};
        var dialog = await DialogService.ShowAsync<CreateUpdateEmployee>("Add Employee", options);

        var result = await dialog.Result;
        if (result != null)
            await dataGrid.ReloadServerData();
    }
}