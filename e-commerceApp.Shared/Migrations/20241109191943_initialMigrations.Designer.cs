// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_commerceApp.Shared.Data;

#nullable disable

namespace e_commerceApp.Shared.Migrations
{
    [DbContext(typeof(EcommDbContext))]
    [Migration("20241109191943_initialMigrations")]
    partial class initialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("e_commerceApp.Shared.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d20a0f9e-6ab6-4446-88ec-cf7a29b6dc66",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "a8ee783b-ed5e-4bab-bb3d-6313b171b287",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ef80918-4867-4251-be28-ad8a8c4fe2f3",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8586),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "123456-7890",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8587),
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f6b22f1-bfb9-461f-9495-6bdbf197495c",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8594),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "9876543210",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8595),
                            UserName = "jane.smith@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cad4c1e9-f942-4437-bb0b-4c99d6d87bd3",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8602),
                            Email = "ike.sunny@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ike",
                            LastName = "Sunny",
                            LockoutEnabled = false,
                            PhoneNumber = "4567891234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8602),
                            UserName = "ike.sunny@example.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c09a224-7108-41b8-b370-31d3808169a2",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8609),
                            Email = "adam.jane@example.com",
                            EmailConfirmed = false,
                            FirstName = "Adam",
                            LastName = "Jane",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8609),
                            UserName = "adam.jane@example.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2eca805-1b2e-4173-b8d5-d1712aba6ad2",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8619),
                            Email = "ronald.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ronald",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8620),
                            UserName = "ronald.smith@example.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e02068f5-2d44-446b-bd2f-556ee62b754d",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8633),
                            Email = "gate.paulo@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gate",
                            LastName = "Paulo",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8634),
                            UserName = "gate.paulo@example.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66634919-89b8-4a27-8bcc-f1ca14390fdf",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8641),
                            Email = "lurge.luck@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lurge",
                            LastName = "Luck",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8641),
                            UserName = "lurge.luck@example.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc3798d4-90f2-46dc-a9f8-c4d0cdaa04a6",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8648),
                            Email = "bana.good@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bana",
                            LastName = "Good",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8648),
                            UserName = "bana.good@example.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeb8fddc-047e-4c77-ac6b-131aa06f3512",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8655),
                            Email = "matt.paul@example.com",
                            EmailConfirmed = false,
                            FirstName = "Matt",
                            LastName = "Paul",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8656),
                            UserName = "matt.paul@example.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd44c010-c4d6-4cb2-940c-c8a0862b64e2",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8662),
                            Email = "john.matt@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Matt",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8663),
                            UserName = "john.matt@example.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e487863-6a74-4f02-bbb4-871063aa6ab1",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8888),
                            Email = "joan.mark@example.com",
                            EmailConfirmed = false,
                            FirstName = "Joan",
                            LastName = "Mark",
                            LockoutEnabled = false,
                            PhoneNumber = "3216549870",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(8889),
                            UserName = "joan.mark@example.com"
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9508),
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 1, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9510),
                            CustomerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 4, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9511),
                            CustomerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 6, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9512),
                            CustomerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 7, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9513),
                            CustomerId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 11, 4, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9514),
                            CustomerId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 10, 27, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9515),
                            CustomerId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 10, 28, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9516),
                            CustomerId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9518),
                            CustomerId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 10, 17, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9519),
                            CustomerId = 10
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9520),
                            CustomerId = 11
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Charger"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Earpiece"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tablet"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Headphones"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Smartwatch"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Home Appliances"
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 2,
                            OrderHeaderId = 1,
                            Price = 1999m,
                            ProductId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            OrderHeaderId = 2,
                            Price = 2999m,
                            ProductId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Count = 3,
                            OrderHeaderId = 3,
                            Price = 4999m,
                            ProductId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Count = 5,
                            OrderHeaderId = 4,
                            Price = 4500m,
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Count = 6,
                            OrderHeaderId = 5,
                            Price = 55000m,
                            ProductId = 5,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Count = 9,
                            OrderHeaderId = 6,
                            Price = 6700m,
                            ProductId = 6,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Count = 3,
                            OrderHeaderId = 7,
                            Price = 8900m,
                            ProductId = 7,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Count = 5,
                            OrderHeaderId = 8,
                            Price = 45000m,
                            ProductId = 8,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Count = 8,
                            OrderHeaderId = 9,
                            Price = 99000m,
                            ProductId = 9,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Count = 7,
                            OrderHeaderId = 10,
                            Price = 8900m,
                            ProductId = 10,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            Count = 6,
                            OrderHeaderId = 11,
                            Price = 235000m,
                            ProductId = 11,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeaders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "City A",
                            Name = "John Doe",
                            OrderDate = new DateTime(2024, 10, 30, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9078),
                            OrderStatus = "Shipped",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Paid",
                            PhoneNumber = "1234567890",
                            PostalCode = "12345",
                            ShippingDate = new DateTime(2024, 11, 4, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9090),
                            State = "Agege",
                            StreetAddress = "123 Main St",
                            TotalPrice = 9999m,
                            UnitPrice = 0m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "City B",
                            Name = "Jane Sunny",
                            OrderDate = new DateTime(2024, 11, 1, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9094),
                            OrderStatus = "Delivered",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "UnPaid",
                            PhoneNumber = "98789943210",
                            PostalCode = "67890",
                            ShippingDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9094),
                            State = "Ajah",
                            StreetAddress = "86 Oak St",
                            TotalPrice = 19999m,
                            UnitPrice = 0m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "City C",
                            Name = "James Wis",
                            OrderDate = new DateTime(2024, 10, 31, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9098),
                            OrderStatus = "Confirmed",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Paid",
                            PhoneNumber = "9867843210",
                            PostalCode = "77898",
                            ShippingDate = new DateTime(2024, 10, 31, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9099),
                            State = " Makurdi",
                            StreetAddress = "45 Oak St",
                            TotalPrice = 70000m,
                            UnitPrice = 0m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            City = "City D",
                            Name = "Joan Mark",
                            OrderDate = new DateTime(2024, 11, 3, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9101),
                            OrderStatus = "Delivered",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Refunded",
                            PhoneNumber = "9876543210",
                            PostalCode = "78754",
                            ShippingDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9102),
                            State = "State A",
                            StreetAddress = "956 Oak St",
                            TotalPrice = 60000m,
                            UnitPrice = 0m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            City = "City E",
                            Name = "John Matt",
                            OrderDate = new DateTime(2024, 11, 8, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9103),
                            OrderStatus = "Confirmed",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Paid",
                            PhoneNumber = "9876887210",
                            PostalCode = "99654",
                            ShippingDate = new DateTime(2024, 11, 1, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9104),
                            State = "State Polaris",
                            StreetAddress = "496 Oak St",
                            TotalPrice = 87000m,
                            UnitPrice = 0m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            City = "City F",
                            Name = "Matt Paul",
                            OrderDate = new DateTime(2024, 10, 28, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9106),
                            OrderStatus = "Pending",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Refunded",
                            PhoneNumber = "4878743210",
                            PostalCode = "09908",
                            ShippingDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9107),
                            State = "State New",
                            StreetAddress = "76 Oak St",
                            TotalPrice = 76000m,
                            UnitPrice = 0m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            City = "City G",
                            Name = "Bana Good",
                            OrderDate = new DateTime(2024, 11, 1, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9109),
                            OrderStatus = "Cancelled",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Paid",
                            PhoneNumber = "9898743210",
                            PostalCode = "88978",
                            ShippingDate = new DateTime(2024, 11, 2, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9109),
                            State = "State Paris",
                            StreetAddress = "6 Oak St",
                            TotalPrice = 30000m,
                            UnitPrice = 0m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            City = "City H",
                            Name = "Lurge Luck",
                            OrderDate = new DateTime(2024, 10, 31, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9112),
                            OrderStatus = "Confirmed",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Refunded",
                            PhoneNumber = "9874543210",
                            PostalCode = "00986",
                            ShippingDate = new DateTime(2024, 11, 4, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9112),
                            State = "State",
                            StreetAddress = "86 Oak St",
                            TotalPrice = 90000m,
                            UnitPrice = 0m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            City = "City I",
                            Name = "Gate Paulo",
                            OrderDate = new DateTime(2024, 10, 26, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9114),
                            OrderStatus = "Cancelled",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "UnPaid",
                            PhoneNumber = "9878453210",
                            PostalCode = "00987",
                            ShippingDate = new DateTime(2024, 10, 26, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9115),
                            State = "State Mark",
                            StreetAddress = "26 Oak St",
                            TotalPrice = 98000m,
                            UnitPrice = 0m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            City = "City J",
                            Name = "Ronald Smith",
                            OrderDate = new DateTime(2024, 10, 22, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9117),
                            OrderStatus = "Pending",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Refunded",
                            PhoneNumber = "6526543210",
                            PostalCode = "77654",
                            ShippingDate = new DateTime(2024, 10, 17, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9118),
                            State = "State Town",
                            StreetAddress = "956 Oak St",
                            TotalPrice = 67000m,
                            UnitPrice = 0m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            City = "City K",
                            Name = "Jane Adam",
                            OrderDate = new DateTime(2024, 11, 2, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9120),
                            OrderStatus = "Shipped",
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = "Paid",
                            PhoneNumber = "9876920210",
                            PostalCode = "88765",
                            ShippingDate = new DateTime(2024, 11, 6, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9121),
                            State = "State V",
                            StreetAddress = "16 Oak St",
                            TotalPrice = 450000m,
                            UnitPrice = 0m,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartegoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartegoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartegoryId = 1,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9024),
                            Description = "Description of Product 1",
                            ImageUrl = "https://example.com/images/product1.jpg",
                            Price = 170000m,
                            ProductStatus = 0,
                            StockQuantity = 100,
                            Title = "Product 1",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9024)
                        },
                        new
                        {
                            Id = 2,
                            CartegoryId = 2,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9027),
                            Description = "Description of Product 2",
                            ImageUrl = "https://example.com/images/product2.jpg",
                            Price = 295000m,
                            ProductStatus = 0,
                            StockQuantity = 50,
                            Title = "Product 2",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9028)
                        },
                        new
                        {
                            Id = 3,
                            CartegoryId = 3,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9030),
                            Description = "Description of Product 3",
                            ImageUrl = "https://example.com/images/product3.jpg",
                            Price = 49500m,
                            ProductStatus = 2,
                            StockQuantity = 40,
                            Title = "Product 3",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9030)
                        },
                        new
                        {
                            Id = 4,
                            CartegoryId = 4,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9032),
                            Description = "Description of Product 4",
                            ImageUrl = "https://example.com/images/product4.jpg",
                            Price = 50000m,
                            ProductStatus = 1,
                            StockQuantity = 500,
                            Title = "Product 4",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9033)
                        },
                        new
                        {
                            Id = 5,
                            CartegoryId = 5,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9034),
                            Description = "Description of Product 5",
                            ImageUrl = "https://example.com/images/product5.jpg",
                            Price = 900000m,
                            ProductStatus = 1,
                            StockQuantity = 700,
                            Title = "Product 5",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9034)
                        },
                        new
                        {
                            Id = 6,
                            CartegoryId = 6,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9036),
                            Description = "Description of Product 6",
                            ImageUrl = "https://example.com/images/product6.jpg",
                            Price = 856000m,
                            ProductStatus = 1,
                            StockQuantity = 900,
                            Title = "Product 6",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9036)
                        },
                        new
                        {
                            Id = 7,
                            CartegoryId = 7,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9038),
                            Description = "Description of Product 7",
                            ImageUrl = "https://example.com/images/product7.jpg",
                            Price = 7000m,
                            ProductStatus = 1,
                            StockQuantity = 80,
                            Title = "Product 7",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9038)
                        },
                        new
                        {
                            Id = 8,
                            CartegoryId = 8,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9039),
                            Description = "Description of Product 8",
                            ImageUrl = "https://example.com/images/product8.jpg",
                            Price = 25000m,
                            ProductStatus = 1,
                            StockQuantity = 800,
                            Title = "Product 8",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9040)
                        },
                        new
                        {
                            Id = 9,
                            CartegoryId = 9,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9042),
                            Description = "Description of Product 9",
                            ImageUrl = "https://example.com/images/product9.jpg",
                            Price = 780000m,
                            ProductStatus = 1,
                            StockQuantity = 700,
                            Title = "Product 9",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9042)
                        },
                        new
                        {
                            Id = 10,
                            CartegoryId = 10,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9044),
                            Description = "Description of Product 10",
                            ImageUrl = "https://example.com/images/product10.jpg",
                            Price = 56000m,
                            ProductStatus = 1,
                            StockQuantity = 700,
                            Title = "Product 10",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9044)
                        },
                        new
                        {
                            Id = 11,
                            CartegoryId = 11,
                            CreatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9046),
                            Description = "Description of Product 11",
                            ImageUrl = "https://example.com/images/product11.jpg",
                            Price = 45000m,
                            ProductStatus = 1,
                            StockQuantity = 600,
                            Title = "Product 11",
                            UpdatedDate = new DateTime(2024, 11, 9, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9046)
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Excellent product!",
                            CreatedDate = new DateTime(2024, 10, 30, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9459),
                            CustomerId = 1,
                            ProductId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Good value for the price.",
                            CreatedDate = new DateTime(2024, 11, 1, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9462),
                            CustomerId = 2,
                            ProductId = 2,
                            Rating = 4
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Satisfactory, but could be improved.",
                            CreatedDate = new DateTime(2024, 11, 4, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9463),
                            CustomerId = 3,
                            ProductId = 3,
                            Rating = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Fairly pleased with the quality.",
                            CreatedDate = new DateTime(2024, 11, 6, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9465),
                            CustomerId = 4,
                            ProductId = 4,
                            Rating = 1
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Fairly pleased with the quality.",
                            CreatedDate = new DateTime(2024, 11, 7, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9466),
                            CustomerId = 5,
                            ProductId = 5,
                            Rating = 2
                        },
                        new
                        {
                            Id = 6,
                            Comment = "pleased with the quality.",
                            CreatedDate = new DateTime(2024, 11, 4, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9468),
                            CustomerId = 6,
                            ProductId = 6,
                            Rating = 4
                        },
                        new
                        {
                            Id = 7,
                            Comment = "pleased with the quality.",
                            CreatedDate = new DateTime(2024, 10, 27, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9469),
                            CustomerId = 7,
                            ProductId = 7,
                            Rating = 4
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Very very pleased with the quality.",
                            CreatedDate = new DateTime(2024, 10, 28, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9470),
                            CustomerId = 8,
                            ProductId = 8,
                            Rating = 5
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Awesome  quality.",
                            CreatedDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9471),
                            CustomerId = 9,
                            ProductId = 9,
                            Rating = 5
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Not really a great quality.",
                            CreatedDate = new DateTime(2024, 10, 17, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9473),
                            CustomerId = 10,
                            ProductId = 10,
                            Rating = 2
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Patially pleased with the quality.",
                            CreatedDate = new DateTime(2024, 11, 5, 19, 19, 42, 135, DateTimeKind.Utc).AddTicks(9477),
                            CustomerId = 11,
                            ProductId = 11,
                            Rating = 3
                        });
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2,
                            ProductId = 1,
                            ShoppingCartId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1,
                            ProductId = 2,
                            ShoppingCartId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 4,
                            ProductId = 3,
                            ShoppingCartId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 5,
                            ProductId = 4,
                            ShoppingCartId = 4
                        },
                        new
                        {
                            Id = 5,
                            Amount = 3,
                            ProductId = 5,
                            ShoppingCartId = 5
                        },
                        new
                        {
                            Id = 6,
                            Amount = 5,
                            ProductId = 6,
                            ShoppingCartId = 6
                        },
                        new
                        {
                            Id = 7,
                            Amount = 6,
                            ProductId = 7,
                            ShoppingCartId = 7
                        },
                        new
                        {
                            Id = 8,
                            Amount = 6,
                            ProductId = 8,
                            ShoppingCartId = 8
                        },
                        new
                        {
                            Id = 9,
                            Amount = 8,
                            ProductId = 9,
                            ShoppingCartId = 9
                        },
                        new
                        {
                            Id = 10,
                            Amount = 8,
                            ProductId = 10,
                            ShoppingCartId = 10
                        },
                        new
                        {
                            Id = 11,
                            Amount = 5,
                            ProductId = 11,
                            ShoppingCartId = 11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.CartItem", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Order", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderDetail", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("e_commerceApp.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderHeader", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", "User")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderItem", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerceApp.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Product", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Category", "Cartegory")
                        .WithMany("Products")
                        .HasForeignKey("CartegoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cartegory");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Review", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Product", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerceApp.Shared.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("e_commerceApp.Shared.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Auth.User", b =>
                {
                    b.Navigation("OrderHeaders");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("e_commerceApp.Shared.Models.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
